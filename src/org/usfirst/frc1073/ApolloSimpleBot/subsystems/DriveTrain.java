// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.ApolloSimpleBot.subsystems;

import org.usfirst.frc1073.ApolloSimpleBot.RobotMap;
import org.usfirst.frc1073.ApolloSimpleBot.commands.*;

import com.ni.vision.NIVision.CalibrationThumbnailType;

import edu.wpi.first.wpilibj.CANTalon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftMotor1 = RobotMap.driveTrainleftMotor1;
    private final CANTalon leftMotor2 = RobotMap.driveTrainleftMotor2;
    private final CANTalon rightMotor1 = RobotMap.driveTrainrightMotor1;
    private final CANTalon rightMotor2 = RobotMap.driveTrainrightMotor2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    boolean invertLeft = true;
    boolean invertRight = false;
    
    boolean invertLeftEncoder = false;
    boolean invertRightEncoder = false;
    
    public DriveTrain() {
    	setupMotors();
    	setupEncoders();
    	setupPID();
    }
    
    private void setupPID() {
    	
    }
    
    private void setupMotors() {
    	leftMotor1.setInverted(invertLeft);
    	leftMotor2.setInverted(invertLeft);
    	rightMotor1.setInverted(invertRight);
    	rightMotor1.setInverted(invertRight);
    	
    	leftMotor1.changeControlMode(CANTalon.TalonControlMode.Follower);
    	leftMotor1.set(leftMotor2.getDeviceID());
    	rightMotor2.changeControlMode(CANTalon.TalonControlMode.Follower);
    	rightMotor2.set(rightMotor1.getDeviceID());
    }
    
    private void setupEncoders() {
    	
    	leftMotor2.reverseSensor(invertLeftEncoder);
    	rightMotor1.reverseSensor(invertRightEncoder);
    	
    	leftMotor2.configEncoderCodesPerRev(360);
    	rightMotor1.configEncoderCodesPerRev(360);
    }
    
    public void manualSetProfile(int id) {
    	if(id != 0 || id != 1) return;
    	else {
    		leftMotor2.setProfile(id);
    		rightMotor1.setProfile(id);
    	}
    }
    
    public void manualSetProfile(int id, double p, double i, double d) {
    	if(id != 0 || id != 1) return;
    	else {
    		leftMotor2.setProfile(id);
    		rightMotor1.setProfile(id);
    		
    		leftMotor2.setPID(p, i, d);
    		rightMotor1.setPID(p, i, d);
    	}
    }
    
    public void setPID(double p, double i, double d) {
    	leftMotor2.setPID(p, i, d);
		rightMotor1.setPID(p, i, d);
    }
    
    public void moveBasic(double left, double right) {
    	
    	if(getState() != CANTalon.TalonControlMode.PercentVbus) setBasic();
    	
    	leftMotor2.set(left);
    	rightMotor1.set(right);
    	
    	SmartDashboard.putNumber("left reading", leftMotor2.getEncVelocity());
    	SmartDashboard.putNumber("right reading", rightMotor1.getEncVelocity());
    	
    }
    
    public void movePIDSpeed(double leftSpeed, double rightSpeed) {
    	
    	if(getState() != CANTalon.TalonControlMode.Speed) setSpeedMode();
    	
    }
    
    public void movePIDPositional(double leftDistance, double rightDistance) {
    	
    	if(getState() != CANTalon.TalonControlMode.Position) setPositional();
    	
    }
    
    public CANTalon.TalonControlMode getState() {
    	return leftMotor2.getControlMode();
    }
    
    public void setBasic() {
    	leftMotor2.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	rightMotor1.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    }
    
    public void setSpeedMode() {
    	leftMotor2.setProfile(0);
    	rightMotor1.setProfile(0);
    	
    	leftMotor2.changeControlMode(CANTalon.TalonControlMode.Speed);
    	rightMotor1.changeControlMode(CANTalon.TalonControlMode.Speed);
    }
    
    public void setPositional() {
    	leftMotor2.setProfile(1);
    	rightMotor1.setProfile(1);
    	
    	leftMotor2.changeControlMode(CANTalon.TalonControlMode.Position);
    	rightMotor1.changeControlMode(CANTalon.TalonControlMode.Position);
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

